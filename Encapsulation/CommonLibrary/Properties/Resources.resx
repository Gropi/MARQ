<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALL_COPIED_FILE_SUCCESSULY" xml:space="preserve">
    <value>All Files have been Successfuly copied.</value>
  </data>
  <data name="APPEND_TEXTNOT_ALLOWED" xml:space="preserve">
    <value>Not allowed to append text.</value>
  </data>
  <data name="ARGS_MISSING_PARAMETER" xml:space="preserve">
    <value>You attempt to start the program with a missing parameter for {0}.</value>
  </data>
  <data name="CHECK_DRIVE_NAME" xml:space="preserve">
    <value>check the drive name.</value>
  </data>
  <data name="COMPARE_NOT_CORRECT_TYPE" xml:space="preserve">
    <value>Object is not a {0}</value>
  </data>
  <data name="CONTENT_LIST_NULL" xml:space="preserve">
    <value>'Content' List is Null</value>
  </data>
  <data name="CONTENT_WRITTEN_SUCCESSFULY_ON_STREAMWRITER" xml:space="preserve">
    <value>Content wrote Successfully to the Stream Writer</value>
  </data>
  <data name="COPIED_FILE_CORRUPTED" xml:space="preserve">
    <value>The Copied File has been Corrupted</value>
  </data>
  <data name="COPIED_SUCCESSFULY" xml:space="preserve">
    <value>File has been successfuly copied</value>
  </data>
  <data name="COPY_FAILED" xml:space="preserve">
    <value>Copy has not been complited successfuly</value>
  </data>
  <data name="CRC_HASHMAP_SUCCESSFULY_CREATED" xml:space="preserve">
    <value>CRC HashMap has been Successfuly created.</value>
  </data>
  <data name="CRC_INFO_PROCESSING" xml:space="preserve">
    <value>Processing CRC</value>
  </data>
  <data name="CSVFILE_APPENDED_SUCCESSFULY_TO_CONTENT" xml:space="preserve">
    <value>ExcelParser: CSV File apended successfuy o the content.</value>
  </data>
  <data name="CULTEINFO_ENGLAND" xml:space="preserve">
    <value>en-EN</value>
  </data>
  <data name="CULTUREPARSERHELPER_STING_IS_NULL" xml:space="preserve">
    <value>The given parameter string {0} in the method {1} is null.</value>
  </data>
  <data name="DEFAULT_MAPPOI_COLOR" xml:space="preserve">
    <value>#999999</value>
  </data>
  <data name="DESTINATION_FILE_NULL" xml:space="preserve">
    <value>Destination File Path is Null.</value>
  </data>
  <data name="DIRECTORY_NOT_FOUND" xml:space="preserve">
    <value>Unable to find Directory "{0}".</value>
  </data>
  <data name="DOWNLOAD_FILE_CANCELED" xml:space="preserve">
    <value>Download has been canceled.</value>
  </data>
  <data name="DOWNLOAD_FILE_DOWNLOADED" xml:space="preserve">
    <value>{0}     downloaded {1} of {2} bytes. {3}% complete.</value>
  </data>
  <data name="DOWNLOAD_FILE_LOCAL_PATH_NOT_GIVEN" xml:space="preserve">
    <value>There is no local path given where the downloaded file has to be stored to.</value>
  </data>
  <data name="DOWNLOAD_FILE_SUCCESSFUL" xml:space="preserve">
    <value>Download completed.</value>
  </data>
  <data name="DOWNLOAD_FILE_URL_NOT_GIVEN" xml:space="preserve">
    <value>There is no url given to download from.</value>
  </data>
  <data name="ERROR" xml:space="preserve">
    <value>Error!  Exception has been occured: {0}, at {1}.</value>
  </data>
  <data name="EXCELPARSER_HANDLED_IO_EXCEPTION" xml:space="preserve">
    <value>While parsing excel file an error occured. The exception is:</value>
  </data>
  <data name="EXCEL_PARSER_CSV_SUCCESSFULY_GENERATED" xml:space="preserve">
    <value>ExcelParser: CSV File has been Successfuly Generated.</value>
  </data>
  <data name="EXCEL_PARSER_FAILED_TO_LOAD_XLSX" xml:space="preserve">
    <value />
  </data>
  <data name="EXCEL_PARSER_FILESTREAM_SUCCESSFULY_GENERATED" xml:space="preserve">
    <value>ExcelParse: FileStream has been Successfuly Generated.</value>
  </data>
  <data name="EXCEL_PARSER_START_LOADING_FILE" xml:space="preserve">
    <value>Start loading file {0}.</value>
  </data>
  <data name="EXCEL_PARSER_XLS_SUCCESSFULY_GENERATED" xml:space="preserve">
    <value>ExcelParser: XLS File has been Successfuly Generated.</value>
  </data>
  <data name="EXPECTED_FILE_EXTENSION_NULL" xml:space="preserve">
    <value>ExpectedFileExtension is Null</value>
  </data>
  <data name="FILEPATH_APPENDED_SUCCESSFULY_TO_CONTENT" xml:space="preserve">
    <value>FilePath apended successfuy o the content.</value>
  </data>
  <data name="FILES_SUCCESSFULY_RETURNED" xml:space="preserve">
    <value>All Files in given Foldeer have been Successfuly returned.</value>
  </data>
  <data name="FILE_DELETED_SUCCESSFULY" xml:space="preserve">
    <value>The File has been deleted successfuly.</value>
  </data>
  <data name="FILE_DELETING_FAILED" xml:space="preserve">
    <value>The file has not been deleted. FilePath: {0}</value>
  </data>
  <data name="FILE_PATH_NULL" xml:space="preserve">
    <value>File Path is null</value>
  </data>
  <data name="FILE_STREAM_NULL" xml:space="preserve">
    <value>File Stream is Null</value>
  </data>
  <data name="FILE_SUCCESSFULY_GENERATED" xml:space="preserve">
    <value>File has been Successfuly Generated.</value>
  </data>
  <data name="FILE_SUCCESSFULY_LOADED" xml:space="preserve">
    <value>File Successfuly Loaded</value>
  </data>
  <data name="FILE_SUCCESSFULY_WRITTEN" xml:space="preserve">
    <value>File has been Successfuly written</value>
  </data>
  <data name="GET_ALL_FIES_FAILED" xml:space="preserve">
    <value>Get All Files Failed.</value>
  </data>
  <data name="IOEXCEPTION" xml:space="preserve">
    <value>I/O Exception was occured . Exception : {0}.</value>
  </data>
  <data name="IOHANDLER_ERROR_FOLDER_SIZE" xml:space="preserve">
    <value>Failed to load the size of the folder. The error message is: {0}</value>
  </data>
  <data name="IOHANDLER_FILEEXTENSION_NOT_CORRECT" xml:space="preserve">
    <value>The given file extension is not correct. The extension is "{0}".</value>
  </data>
  <data name="IOHANDLER_FILE_NOT_FOUND" xml:space="preserve">
    <value>The given file has not been found. Expected file: {0}</value>
  </data>
  <data name="IOHANDLER_NULL_REFERENCE_GIVEN" xml:space="preserve">
    <value>The given file name is a null reference. Expected file: {0}</value>
  </data>
  <data name="JSONPARSER_INVALID_FILE" xml:space="preserve">
    <value>The given file path doesn't exist or is not a .json file. Please give a valid json file.</value>
  </data>
  <data name="JSONPARSER_INVALID_FILE_CONTENT" xml:space="preserve">
    <value>The file content could not be parsed into an JObject! Error: "{0}"</value>
  </data>
  <data name="JSONPARSER_INVALID_JSONSTRING" xml:space="preserve">
    <value>The given string is not in a valid json format and can't be parsed into a JSON Object: {0}</value>
  </data>
  <data name="JSONPARSER_JSONPARAMETER_NULL" xml:space="preserve">
    <value>The JsonParameter passed is null.</value>
  </data>
  <data name="JSONPARSER_NON_EXISTING_KEY" xml:space="preserve">
    <value>The given key {0} doesn't exist in the json object. </value>
  </data>
  <data name="LINE_WRITTEN_SUCCESSFULY" xml:space="preserve">
    <value>Line has been Successfuly Written.</value>
  </data>
  <data name="MAPPOIHANDLING_GROUPLAYERNAME" xml:space="preserve">
    <value>Grouplayer</value>
  </data>
  <data name="NOT_CORRECT_FORMAT" xml:space="preserve">
    <value>File not in correct format. Expected: {0}</value>
  </data>
  <data name="NOT_MOVED" xml:space="preserve">
    <value>File has not been moved.</value>
  </data>
  <data name="NO_DRIVE_FOUND" xml:space="preserve">
    <value>No External Drive has been found.</value>
  </data>
  <data name="OVERRIDE_FILE_DISABLED" xml:space="preserve">
    <value>File Override is Disabled, please check the permission variable.</value>
  </data>
  <data name="PARAMETER_IS_NULL" xml:space="preserve">
    <value>The given parameter must not be null. Parameter {0}.</value>
  </data>
  <data name="PROCESSHANDLER_CLOSED_SUCCESSFUL" xml:space="preserve">
    <value>The process {0} finished successful. </value>
  </data>
  <data name="PROCESSHANDLER_EMPTY_PROCESSNAME" xml:space="preserve">
    <value>The process name or the process arguments passed is null or empty. </value>
  </data>
  <data name="PROCESSHANDLER_FOUND_RUNNING_INSTANCE" xml:space="preserve">
    <value>There are {0} instances alive. Start killing them.</value>
  </data>
  <data name="PROCESSHANDLER_IDLE_PROCESS_STARTED" xml:space="preserve">
    <value>Process {0} idle process started.</value>
  </data>
  <data name="PROCESSHANDLER_IDLE_TIME_EXPIRED" xml:space="preserve">
    <value>The idle time of the process {0} is expired. Program is going to kill this process now.</value>
  </data>
  <data name="PROCESSHANDLER_KILLED_INSTANCE" xml:space="preserve">
    <value>Killed ADTF instance with PID {0} and name {1}.</value>
  </data>
  <data name="PROCESSHANDLER_START_NEW_INSTANCE" xml:space="preserve">
    <value>The program is going to start a the new process {0} now.</value>
  </data>
  <data name="SCHEMA_CREATED_SUCCESSFULY" xml:space="preserve">
    <value>XSD Schema has been Successfuly created.</value>
  </data>
  <data name="SCHEMA_NULL" xml:space="preserve">
    <value>Schema passed as null.</value>
  </data>
  <data name="SOURCE_FILE_NULL" xml:space="preserve">
    <value>Source File Path is null.</value>
  </data>
  <data name="STREAM_WRITER_NULL" xml:space="preserve">
    <value>Stream Writer is null</value>
  </data>
  <data name="SUCCESSFUL" xml:space="preserve">
    <value>process successfuly completed in : {0}</value>
  </data>
  <data name="TREEVIEWNODE_ITEM_NULL" xml:space="preserve">
    <value>The given TreeViewItem/ TreeViewNode is null. </value>
  </data>
  <data name="WRITING_XSD_FILE_SUCCESSFUL" xml:space="preserve">
    <value>XSD Parser: XSD File has been Generated successfuly.</value>
  </data>
  <data name="XSDPARSER_FILE_EXISTS_EXCEPTION" xml:space="preserve">
    <value>File is already Exists.</value>
  </data>
  <data name="XSDPARSER_SOURCE_FILE_NOT_FOUND" xml:space="preserve">
    <value>The given source file has not been found. Expeceted file: {0}</value>
  </data>
</root>